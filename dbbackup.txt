create table
  public.pipelines (
    pipeline_id serial,
    pipeline_name character varying(255) not null,
    created_at timestamp without time zone null default current_timestamp,
    constraint pipelines_pkey primary key (pipeline_id)
  ) tablespace pg_default;


  create table
  public.pipeline_stages (
    stage_id serial,
    pipeline_id integer null,
    stage_name character varying(255) not null,
    created_at timestamp without time zone null default current_timestamp,
    constraint pipeline_stages_pkey primary key (stage_id),
    constraint pipeline_stages_pipeline_id_fkey foreign key (pipeline_id) references pipelines (pipeline_id)
  ) tablespace pg_default;

  create table
  public.pipeline_fields (
    field_id serial,
    stage_id integer null,
    field_name character varying(255) not null,
    field_type character varying(50) not null,
    created_at timestamp without time zone null default current_timestamp,
    constraint pipeline_fields_pkey primary key (field_id),
    constraint pipeline_fields_stage_id_fkey foreign key (stage_id) references pipeline_stages (stage_id),
    constraint pipeline_fields_field_type_check check (
      (
        (field_type)::text = any (
          (
            array[
              'checkbox'::character varying,
              'textfield'::character varying,
              'file'::character varying
            ]
          )::text[]
        )
      )
    )
  ) tablespace pg_default;

create table
  public.pipeline_data_json (
    enquiry_id uuid not null,
    pipeline_id integer not null,
    stage_id integer not null,
    data jsonb not null,
    constraint pipeline_data_json_pkey primary key (enquiry_id, pipeline_id, stage_id),
    constraint pipeline_data_json_enquiry_id_fkey foreign key (enquiry_id) references enquiries (id),
    constraint pipeline_data_json_pipeline_id_fkey foreign key (pipeline_id) references pipelines (pipeline_id),
    constraint pipeline_data_json_stage_id_fkey foreign key (stage_id) references pipeline_stages (stage_id)
  ) tablespace pg_default;


create table
  public.enquiries (
    id uuid not null default extensions.uuid_generate_v4 (),
    name text not null,
    mobilenumber1 text not null,
    mobilenumber2 text null,
    address text null,
    location text null,
    stage text not null,
    mailid text null,
    leadsource text null,
    assignedto integer null,
    remarks text null,
    priority text not null,
    invoiced boolean not null default false,
    collected boolean not null default false,
    products jsonb null,
    created_at timestamp with time zone null default now(),
    salesflow_code text null,
    won_date timestamp with time zone null,
    pipeline_id integer null,
    current_stage_id integer null,
    last_updated timestamp with time zone null default now(),
    state character varying(255) null,
    district character varying(255) null,
    expected_completion_date timestamp with time zone null,
    constraint enquiries_pkey primary key (id),
    constraint enquiries_pipeline_id_fkey foreign key (pipeline_id) references pipelines (pipeline_id)
  ) tablespace pg_default;

create trigger set_last_updated before
update on enquiries for each row
execute function update_last_updated_column (); , 

create table
  public.tasks (
    id uuid not null default extensions.uuid_generate_v4 (),
    task_name text not null,
    task_message text not null,
    enquiry_id uuid not null,
    type text not null,
    submission_date timestamp with time zone not null default (now() + '1 day'::interval),
    assigned_by integer not null,
    assigned_to integer not null,
    completion_status text not null default 'new'::text,
    constraint tasks_pkey primary key (id),
    constraint tasks_enquiry_id_fkey foreign key (enquiry_id) references enquiries (id),
    constraint tasks_completion_status_check check (
      (
        completion_status = any (
          array[
            'new'::text,
            'ongoing'::text,
            'completed'::text,
            'overdue'::text
          ]
        )
      )
    ),
    constraint tasks_type_check check (
      (
        type = any (array['service'::text, 'product'::text])
      )
    )
  ) tablespace pg_default;